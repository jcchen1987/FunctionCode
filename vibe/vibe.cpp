#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "ai_defs.h"


#define V_RADIUS                10
#define V_BACKGROUND            0
#define V_TARGET                255
#define V_BGMODEL_SAMPLENUM     5
#define V_MIN_MATCHNUM_N1       0
    

#define CLIP(X) (X)>255?255:((X)<0?0:(X))

//定义随机数表格,与V_BGMODEL_SAMPLENUM相对应，需同步修改
static u8 g_au8TimeSubRnd[1024] = {
1, 12, 0, 9, 6, 5, 13, 12, 2, 6, 2, 10, 13, 7, 7, 9, 14, 2, 0, 8, 4, 12, 0, 0, 10, 8, 15, 3, 7, 9, 6, 11, 
12, 6, 11, 8, 8, 12, 6, 9, 0, 9, 5, 9, 6, 15, 7, 0, 6, 11, 2, 14, 9, 2, 5, 8, 9, 7, 11, 15, 15, 1, 6, 11, 
13, 6, 11, 2, 12, 7, 5, 5, 3, 15, 4, 0, 6, 2, 0, 2, 12, 8, 3, 4, 14, 1, 2, 2, 5, 15, 11, 6, 9, 8, 8, 1, 
6, 3, 15, 8, 9, 6, 12, 2, 6, 2, 4, 10, 10, 8, 9, 9, 9, 5, 6, 10, 5, 15, 2, 4, 3, 4, 4, 10, 13, 3, 7, 8, 
5, 15, 1, 3, 10, 12, 9, 10, 6, 1, 6, 7, 14, 3, 2, 1, 6, 6, 13, 14, 8, 15, 10, 15, 12, 0, 13, 13, 6, 9, 8, 13, 
9, 15, 10, 7, 5, 12, 4, 5, 13, 5, 2, 2, 8, 14, 12, 12, 10, 3, 7, 13, 9, 7, 15, 9, 9, 9, 14, 13, 5, 8, 14, 6, 
14, 7, 2, 13, 7, 7, 9, 13, 11, 0, 5, 11, 13, 6, 3, 13, 15, 14, 9, 7, 6, 5, 12, 12, 0, 8, 3, 6, 7, 14, 0, 1, 
4, 12, 6, 5, 11, 15, 14, 14, 4, 11, 14, 9, 3, 10, 8, 4, 11, 14, 4, 5, 3, 1, 8, 1, 5, 5, 15, 0, 10, 14, 0, 6, 
0, 6, 2, 2, 1, 1, 5, 10, 1, 13, 13, 4, 4, 3, 2, 11, 1, 11, 11, 9, 14, 11, 9, 6, 5, 5, 1, 15, 3, 10, 2, 9, 
5, 3, 10, 4, 15, 3, 1, 2, 8, 7, 12, 0, 1, 15, 15, 15, 0, 10, 10, 9, 12, 15, 12, 8, 6, 8, 5, 13, 9, 3, 7, 10, 
12, 4, 15, 13, 10, 5, 12, 3, 4, 10, 6, 2, 4, 10, 2, 0, 4, 11, 5, 11, 12, 10, 15, 0, 15, 13, 5, 8, 1, 0, 13, 1, 
3, 7, 8, 3, 12, 14, 5, 3, 8, 14, 13, 11, 6, 8, 5, 12, 6, 9, 10, 1, 14, 12, 5, 7, 0, 12, 7, 1, 5, 11, 7, 3, 
0, 12, 0, 1, 13, 9, 5, 15, 5, 8, 13, 14, 14, 3, 2, 10, 8, 6, 0, 15, 13, 4, 14, 6, 6, 12, 10, 8, 0, 7, 9, 0, 
14, 15, 15, 10, 6, 13, 9, 11, 10, 8, 14, 1, 7, 8, 11, 1, 13, 7, 6, 12, 8, 5, 4, 2, 4, 11, 7, 1, 4, 14, 7, 6, 
13, 14, 4, 11, 9, 0, 4, 9, 10, 11, 8, 7, 10, 4, 14, 2, 10, 5, 11, 10, 3, 9, 13, 8, 9, 4, 10, 1, 8, 5, 12, 14, 
7, 7, 3, 5, 15, 11, 12, 15, 12, 9, 13, 1, 12, 15, 2, 10, 1, 4, 0, 4, 7, 15, 5, 8, 11, 5, 11, 5, 8, 3, 2, 2, 
2, 11, 8, 10, 1, 5, 15, 9, 0, 11, 13, 5, 3, 7, 5, 7, 10, 0, 7, 7, 14, 12, 10, 3, 7, 10, 15, 6, 14, 4, 8, 11, 
7, 12, 6, 9, 11, 8, 5, 11, 0, 2, 4, 1, 2, 13, 13, 13, 11, 8, 9, 1, 6, 12, 14, 6, 0, 11, 7, 0, 3, 3, 10, 1, 
8, 14, 5, 12, 11, 0, 13, 2, 1, 10, 5, 7, 2, 2, 3, 15, 11, 1, 8, 14, 5, 15, 7, 4, 12, 12, 0, 11, 6, 4, 2, 8, 
5, 11, 4, 6, 10, 4, 7, 7, 9, 5, 14, 14, 10, 9, 2, 4, 9, 15, 10, 14, 13, 9, 0, 10, 12, 0, 11, 12, 5, 10, 0, 15, 
3, 1, 6, 11, 6, 8, 11, 0, 0, 1, 10, 2, 0, 3, 14, 11, 12, 6, 0, 10, 0, 3, 4, 7, 3, 0, 12, 14, 2, 7, 10, 13, 
6, 4, 14, 11, 15, 12, 6, 7, 0, 0, 9, 13, 15, 7, 8, 0, 6, 11, 6, 4, 0, 11, 15, 4, 0, 9, 14, 14, 8, 1, 8, 13, 
13, 13, 14, 15, 12, 7, 6, 2, 2, 4, 12, 14, 2, 12, 9, 10, 0, 14, 4, 15, 2, 0, 7, 9, 6, 11, 4, 14, 14, 14, 2, 0, 
1, 11, 0, 6, 3, 10, 8, 2, 4, 8, 1, 8, 4, 8, 4, 2, 6, 4, 2, 3, 8, 7, 14, 9, 0, 15, 3, 0, 6, 3, 3, 1, 
12, 7, 15, 9, 4, 15, 14, 13, 8, 3, 2, 11, 8, 1, 12, 12, 7, 13, 1, 3, 1, 4, 3, 3, 15, 15, 11, 14, 7, 1, 10, 2, 
7, 14, 3, 12, 13, 13, 11, 4, 3, 13, 1, 2, 4, 11, 1, 1, 5, 9, 8, 15, 15, 13, 1, 11, 0, 6, 3, 8, 5, 14, 5, 5, 
1, 2, 12, 9, 2, 11, 15, 6, 15, 10, 5, 15, 5, 2, 14, 2, 12, 4, 4, 8, 1, 3, 11, 1, 8, 1, 8, 12, 4, 6, 14, 1, 
1, 7, 15, 10, 1, 10, 14, 15, 13, 11, 0, 13, 7, 4, 14, 5, 1, 15, 14, 3, 3, 12, 7, 9, 7, 13, 2, 0, 15, 1, 15, 13, 
6, 2, 9, 12, 10, 7, 14, 5, 3, 7, 3, 15, 1, 8, 12, 11, 10, 12, 2, 11, 12, 1, 3, 2, 10, 0, 13, 2, 8, 3, 13, 5, 
0, 3, 11, 6, 9, 4, 5, 4, 10, 9, 1, 13, 5, 4, 6, 11, 11, 9, 10, 9, 13, 10, 6, 4, 8, 9, 13, 13, 9, 15, 4, 11, 
9, 12, 0, 0, 1, 1, 13, 8, 3, 4, 15, 13, 14, 5, 3, 3, 2, 4, 0, 13, 7, 13, 10, 2, 14, 3, 0, 3, 10, 12, 4, 13, 
12, 10, 15, 14, 6, 9, 14, 9, 5, 7, 8, 7, 13, 5, 3, 10, 3, 9, 7, 1, 1, 13, 2, 2, 11, 15, 12, 7, 12, 3, 14, 4};

static u8 g_au8CurSmplRnd[1024] = {
2, 4, 0, 1, 0, 4, 1, 4, 2, 4, 1, 0, 3, 2, 1, 0, 1, 2, 4, 2, 3, 0, 3, 0, 4, 0, 1, 1, 3, 0, 2, 1, 
0, 3, 3, 1, 0, 4, 4, 4, 2, 3, 4, 2, 2, 1, 1, 2, 0, 2, 3, 1, 4, 3, 0, 1, 3, 2, 1, 0, 2, 0, 3, 0, 
4, 3, 3, 1, 3, 0, 1, 2, 1, 4, 0, 3, 1, 0, 3, 1, 2, 2, 4, 2, 4, 4, 1, 2, 2, 1, 2, 4, 3, 1, 2, 4, 
0, 0, 3, 4, 2, 1, 1, 0, 4, 1, 3, 0, 4, 3, 2, 2, 4, 2, 4, 2, 0, 4, 1, 3, 3, 2, 4, 2, 0, 4, 2, 3, 
4, 2, 2, 1, 1, 4, 0, 4, 0, 4, 0, 2, 4, 3, 4, 1, 0, 0, 3, 2, 2, 3, 2, 4, 3, 2, 2, 1, 3, 4, 0, 2, 
4, 3, 2, 1, 0, 2, 4, 1, 2, 2, 4, 2, 3, 3, 4, 1, 3, 0, 4, 3, 2, 3, 4, 2, 4, 1, 0, 2, 3, 1, 2, 3, 
0, 0, 3, 4, 2, 2, 0, 1, 2, 0, 1, 3, 1, 0, 4, 0, 4, 3, 0, 4, 0, 4, 1, 4, 0, 4, 0, 2, 4, 3, 4, 1, 
2, 3, 4, 2, 3, 0, 4, 4, 0, 4, 0, 0, 0, 0, 0, 3, 2, 4, 2, 1, 2, 4, 3, 0, 2, 0, 3, 3, 1, 4, 4, 1, 
2, 0, 3, 1, 3, 4, 3, 1, 0, 3, 3, 1, 2, 0, 2, 1, 2, 4, 4, 2, 3, 4, 3, 3, 1, 2, 1, 2, 2, 4, 2, 4, 
2, 4, 0, 3, 1, 3, 1, 3, 1, 0, 3, 1, 2, 1, 0, 0, 0, 4, 3, 3, 1, 3, 2, 2, 3, 3, 0, 3, 1, 4, 3, 2, 
2, 0, 4, 0, 4, 3, 0, 3, 2, 0, 0, 2, 4, 0, 1, 2, 4, 3, 1, 3, 3, 2, 4, 1, 2, 1, 3, 2, 2, 4, 2, 3, 
2, 4, 3, 1, 2, 1, 0, 4, 2, 1, 2, 0, 4, 0, 1, 0, 4, 1, 4, 2, 3, 4, 2, 3, 4, 0, 3, 1, 2, 3, 2, 0, 
1, 3, 3, 0, 3, 3, 3, 1, 4, 0, 4, 2, 3, 4, 2, 0, 1, 2, 4, 0, 1, 1, 1, 4, 2, 3, 2, 4, 4, 1, 1, 3, 
2, 2, 3, 1, 2, 4, 0, 3, 0, 2, 0, 2, 0, 1, 3, 4, 3, 4, 2, 4, 0, 1, 2, 0, 2, 0, 3, 3, 3, 1, 1, 2, 
3, 1, 1, 1, 1, 4, 1, 0, 0, 4, 3, 4, 2, 1, 0, 3, 1, 0, 2, 2, 1, 2, 1, 0, 1, 1, 0, 3, 3, 0, 0, 2, 
2, 4, 2, 3, 4, 4, 0, 2, 3, 4, 3, 0, 0, 2, 0, 4, 1, 4, 3, 1, 3, 1, 0, 0, 1, 0, 2, 1, 4, 3, 0, 2, 
2, 4, 1, 2, 0, 4, 2, 0, 0, 4, 4, 1, 3, 4, 4, 3, 3, 3, 0, 1, 4, 1, 0, 3, 1, 4, 0, 0, 1, 0, 3, 4, 
3, 2, 4, 4, 0, 3, 2, 3, 3, 1, 3, 2, 0, 1, 4, 0, 0, 3, 4, 1, 0, 2, 4, 0, 1, 3, 0, 1, 4, 1, 0, 0, 
1, 3, 1, 4, 3, 3, 2, 4, 3, 3, 4, 1, 2, 0, 2, 2, 4, 1, 0, 3, 3, 1, 0, 0, 3, 0, 1, 0, 0, 2, 1, 4, 
1, 3, 2, 1, 0, 2, 1, 3, 4, 0, 1, 3, 3, 1, 4, 1, 4, 4, 1, 4, 1, 3, 1, 0, 1, 3, 0, 4, 4, 2, 0, 0, 
1, 3, 0, 4, 1, 4, 2, 4, 2, 0, 3, 0, 4, 0, 4, 2, 2, 3, 0, 0, 3, 2, 3, 1, 3, 1, 3, 4, 0, 1, 4, 1, 
1, 4, 1, 3, 0, 2, 3, 1, 2, 0, 3, 2, 1, 0, 3, 3, 4, 3, 0, 4, 2, 1, 4, 1, 2, 3, 2, 0, 2, 3, 0, 0, 
1, 1, 4, 4, 3, 2, 4, 0, 2, 3, 2, 3, 1, 3, 0, 2, 4, 1, 0, 2, 2, 4, 0, 2, 3, 0, 1, 1, 2, 4, 4, 0, 
4, 4, 2, 3, 2, 1, 3, 1, 2, 4, 3, 3, 1, 3, 2, 4, 4, 1, 3, 1, 3, 3, 1, 4, 3, 1, 2, 0, 2, 1, 3, 1, 
4, 1, 1, 4, 1, 2, 0, 3, 2, 0, 2, 4, 0, 3, 1, 3, 0, 2, 3, 3, 3, 1, 4, 0, 0, 1, 0, 3, 1, 4, 4, 4, 
4, 1, 4, 1, 3, 0, 2, 3, 1, 2, 0, 2, 0, 2, 3, 4, 2, 1, 1, 0, 3, 0, 2, 1, 4, 1, 2, 4, 1, 3, 1, 3, 
3, 3, 0, 2, 3, 1, 4, 4, 3, 3, 0, 0, 2, 4, 1, 2, 0, 4, 1, 1, 1, 1, 4, 3, 3, 4, 2, 1, 1, 2, 0, 2, 
3, 0, 2, 0, 0, 1, 4, 2, 2, 2, 2, 4, 4, 1, 0, 4, 3, 1, 2, 0, 0, 1, 4, 2, 1, 1, 4, 4, 2, 4, 1, 3, 
0, 2, 3, 3, 3, 0, 4, 4, 2, 0, 3, 0, 3, 0, 4, 0, 1, 1, 2, 0, 2, 4, 2, 0, 4, 2, 3, 3, 3, 3, 2, 3, 
4, 4, 0, 1, 2, 1, 4, 4, 3, 2, 4, 1, 0, 0, 4, 0, 1, 2, 2, 1, 0, 0, 3, 2, 1, 4, 0, 2, 2, 2, 2, 2, 
1, 1, 0, 1, 0, 2, 0, 4, 0, 4, 2, 0, 4, 0, 3, 3, 1, 1, 4, 4, 3, 2, 4, 0, 1, 0, 4, 1, 4, 2, 4, 1, 
0, 3, 2, 1, 0, 1, 2, 4, 2, 3, 0, 3, 0, 4, 0, 1, 1, 3, 0, 2, 1, 0, 3, 3, 1, 0, 4, 4, 4, 2, 3, 4};

static u8 g_au8NeibureRnd[1024] = {
0, 1, 0, 0, 1, 0, 0, 1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 1, 2, 0, 2, 2, 1, 2, 1, 0, 2, 2, 2, 1, 2, 
0, 0, 0, 0, 1, 1, 0, 2, 0, 1, 1, 2, 2, 0, 1, 1, 2, 2, 1, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 0, 1, 0, 
1, 0, 1, 0, 0, 2, 0, 1, 1, 0, 0, 1, 0, 2, 2, 0, 2, 2, 1, 0, 1, 1, 1, 2, 0, 1, 1, 0, 2, 1, 0, 0, 
2, 0, 1, 2, 1, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2, 0, 0, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 2, 1, 2, 0, 
2, 2, 0, 2, 1, 1, 2, 1, 0, 0, 0, 2, 1, 1, 0, 0, 0, 1, 2, 0, 0, 2, 0, 1, 0, 2, 2, 0, 0, 1, 1, 1, 
1, 1, 2, 2, 0, 2, 1, 0, 2, 2, 2, 2, 1, 1, 0, 2, 0, 1, 2, 2, 0, 0, 1, 1, 1, 1, 1, 2, 1, 1, 0, 0, 
0, 0, 2, 1, 1, 0, 0, 1, 2, 1, 1, 2, 0, 1, 1, 0, 2, 2, 0, 2, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0, 2, 1, 
1, 0, 2, 0, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 0, 1, 1, 1, 0, 2, 0, 0, 1, 0, 0, 2, 0, 2, 2, 1, 1, 
2, 2, 2, 2, 2, 2, 0, 2, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 2, 0, 2, 2, 2, 2, 2, 1, 1, 0, 1, 0, 0, 
1, 0, 1, 1, 1, 1, 0, 2, 0, 2, 2, 0, 1, 2, 1, 1, 0, 2, 0, 0, 1, 1, 0, 2, 0, 0, 1, 2, 1, 2, 2, 1, 
0, 1, 0, 0, 1, 2, 0, 1, 2, 2, 0, 2, 0, 0, 0, 1, 0, 1, 0, 2, 2, 2, 0, 2, 0, 2, 2, 0, 1, 0, 0, 1, 
2, 2, 2, 0, 0, 1, 2, 2, 2, 2, 1, 0, 1, 2, 0, 0, 2, 2, 2, 1, 2, 0, 1, 0, 0, 0, 2, 2, 2, 0, 2, 0, 
0, 0, 2, 0, 0, 2, 0, 2, 2, 1, 1, 0, 2, 1, 1, 0, 1, 1, 2, 0, 2, 1, 1, 2, 1, 0, 0, 1, 0, 0, 1, 0, 
2, 2, 0, 2, 2, 2, 2, 0, 0, 2, 0, 1, 0, 0, 1, 1, 2, 2, 0, 1, 2, 0, 1, 2, 2, 2, 1, 0, 1, 1, 1, 0, 
0, 1, 2, 0, 2, 0, 0, 1, 2, 0, 2, 2, 0, 1, 0, 0, 2, 2, 0, 0, 1, 0, 1, 2, 1, 0, 1, 0, 2, 1, 1, 1, 
1, 2, 1, 0, 0, 2, 2, 2, 1, 2, 1, 0, 2, 0, 2, 1, 0, 1, 1, 0, 2, 1, 2, 2, 1, 1, 0, 1, 0, 1, 1, 2, 
1, 0, 2, 0, 0, 1, 2, 2, 0, 2, 0, 1, 0, 1, 2, 0, 1, 2, 0, 2, 1, 1, 0, 0, 2, 0, 2, 2, 1, 2, 0, 1, 
2, 1, 2, 1, 0, 0, 0, 2, 1, 0, 2, 1, 1, 0, 0, 1, 1, 0, 1, 1, 2, 1, 0, 1, 2, 0, 0, 1, 2, 1, 0, 1, 
1, 0, 1, 2, 0, 2, 0, 2, 2, 0, 2, 0, 0, 2, 0, 2, 1, 0, 2, 2, 2, 2, 2, 2, 0, 1, 1, 1, 2, 2, 0, 2, 
0, 2, 1, 0, 0, 1, 0, 0, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 1, 1, 1, 2, 2, 0, 1, 0, 2, 0, 1, 2, 2, 0, 
0, 1, 0, 0, 2, 1, 0, 1, 2, 0, 2, 1, 1, 0, 0, 0, 2, 1, 2, 1, 2, 1, 0, 2, 2, 1, 1, 0, 0, 1, 2, 0, 
1, 2, 0, 1, 0, 2, 1, 2, 0, 2, 0, 2, 2, 0, 2, 0, 1, 2, 2, 1, 2, 1, 2, 1, 1, 0, 2, 0, 2, 1, 1, 2, 
0, 0, 2, 1, 1, 1, 2, 0, 1, 0, 0, 0, 1, 2, 1, 1, 0, 2, 0, 1, 1, 0, 1, 2, 2, 1, 0, 0, 1, 1, 2, 1, 
1, 0, 2, 1, 2, 1, 2, 2, 1, 0, 1, 2, 2, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 2, 0, 1, 
2, 2, 0, 1, 1, 0, 0, 0, 2, 1, 1, 1, 2, 2, 1, 2, 2, 0, 1, 1, 2, 0, 2, 1, 2, 2, 0, 0, 0, 1, 2, 2, 
0, 2, 1, 0, 2, 1, 2, 2, 0, 2, 2, 2, 0, 0, 2, 2, 1, 1, 1, 2, 1, 0, 0, 2, 1, 1, 0, 1, 1, 1, 0, 0, 
1, 0, 0, 2, 0, 1, 0, 2, 1, 0, 2, 1, 2, 2, 1, 1, 1, 0, 2, 2, 1, 2, 0, 0, 0, 2, 0, 1, 1, 1, 1, 0, 
2, 0, 2, 0, 2, 1, 2, 0, 1, 2, 2, 2, 2, 2, 1, 0, 1, 1, 0, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 1, 0, 1, 
1, 0, 1, 1, 0, 0, 2, 2, 1, 2, 0, 2, 0, 1, 0, 1, 1, 0, 2, 0, 1, 1, 2, 0, 2, 2, 2, 1, 0, 0, 1, 0, 
1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 1, 1, 0, 0, 1, 0, 0, 2, 2, 0, 1, 1, 2, 2, 1, 1, 2, 0, 2, 1, 0, 1, 
1, 1, 0, 2, 1, 2, 1, 2, 2, 0, 1, 0, 1, 2, 2, 1, 0, 0, 0, 2, 2, 0, 1, 2, 1, 2, 1, 0, 0, 0, 1, 0, 
1, 2, 0, 1, 2, 0, 0, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 2};
static u8 g_au8NeiSmplRnd[1024] = {
3, 0, 4, 2, 1, 4, 2, 2, 0, 4, 2, 0, 2, 0, 2, 3, 0, 1, 2, 0, 4, 1, 3, 2, 3, 0, 0, 1, 0, 3, 0, 4, 
2, 4, 1, 0, 4, 0, 4, 4, 1, 2, 4, 4, 1, 1, 4, 0, 1, 3, 2, 4, 3, 2, 3, 0, 1, 2, 1, 2, 4, 3, 3, 3, 
0, 2, 1, 4, 4, 2, 3, 3, 2, 0, 3, 2, 4, 0, 2, 1, 1, 4, 4, 0, 3, 2, 1, 4, 4, 0, 3, 2, 4, 0, 2, 0, 
0, 4, 2, 2, 3, 0, 0, 0, 1, 0, 3, 2, 1, 0, 2, 2, 3, 3, 4, 0, 4, 0, 4, 1, 2, 1, 4, 4, 2, 3, 2, 2, 
0, 1, 2, 1, 0, 3, 1, 4, 1, 2, 0, 1, 1, 2, 2, 0, 4, 0, 3, 2, 4, 2, 0, 1, 4, 1, 1, 4, 1, 0, 0, 3, 
1, 1, 3, 0, 0, 1, 2, 1, 3, 0, 2, 4, 0, 1, 2, 0, 3, 2, 1, 3, 4, 2, 2, 1, 4, 2, 0, 3, 0, 1, 3, 1, 
1, 4, 0, 1, 4, 4, 1, 1, 0, 1, 1, 0, 1, 0, 3, 3, 4, 0, 0, 1, 0, 2, 3, 0, 4, 1, 4, 3, 1, 4, 1, 3, 
2, 3, 2, 3, 2, 2, 0, 4, 3, 2, 3, 3, 1, 1, 2, 4, 3, 4, 1, 3, 3, 0, 3, 1, 2, 0, 1, 4, 4, 0, 3, 0, 
2, 3, 0, 4, 2, 0, 1, 3, 0, 2, 1, 4, 3, 0, 1, 1, 4, 1, 2, 0, 0, 3, 0, 2, 3, 0, 3, 1, 2, 1, 1, 4, 
1, 1, 2, 1, 3, 3, 0, 2, 1, 4, 3, 1, 3, 1, 0, 2, 4, 0, 3, 0, 4, 2, 3, 0, 2, 3, 2, 2, 1, 3, 3, 1, 
3, 1, 2, 0, 4, 3, 2, 3, 3, 0, 4, 0, 4, 2, 1, 0, 0, 1, 0, 2, 1, 2, 3, 2, 0, 4, 3, 1, 4, 2, 1, 1, 
4, 4, 0, 1, 3, 0, 3, 2, 0, 2, 3, 3, 4, 0, 4, 0, 4, 1, 3, 1, 0, 1, 1, 4, 0, 1, 2, 1, 0, 3, 4, 1, 
3, 3, 1, 3, 0, 1, 2, 1, 3, 3, 0, 0, 3, 2, 0, 3, 0, 4, 3, 0, 1, 2, 3, 2, 4, 0, 1, 1, 1, 2, 2, 2, 
2, 1, 1, 0, 3, 3, 4, 3, 1, 2, 4, 3, 0, 1, 2, 4, 1, 0, 3, 1, 1, 0, 1, 1, 0, 4, 3, 4, 0, 4, 4, 3, 
3, 1, 0, 3, 1, 3, 3, 0, 3, 2, 2, 3, 1, 2, 1, 3, 3, 3, 2, 3, 4, 0, 1, 2, 1, 3, 0, 3, 0, 4, 2, 1, 
4, 3, 3, 0, 3, 3, 2, 3, 1, 4, 4, 2, 1, 0, 1, 4, 1, 0, 3, 0, 1, 1, 3, 0, 2, 2, 0, 4, 2, 1, 0, 1, 
3, 2, 1, 3, 4, 1, 4, 0, 3, 2, 3, 3, 2, 3, 0, 1, 2, 2, 4, 1, 4, 1, 3, 2, 0, 2, 2, 3, 4, 2, 2, 2, 
2, 0, 0, 3, 2, 0, 2, 0, 2, 1, 2, 1, 4, 0, 1, 2, 2, 1, 2, 4, 2, 4, 3, 0, 2, 4, 1, 4, 3, 3, 3, 1, 
3, 2, 2, 1, 4, 3, 2, 1, 1, 4, 0, 4, 0, 2, 2, 4, 1, 4, 3, 4, 0, 3, 4, 0, 0, 2, 0, 3, 3, 0, 3, 1, 
4, 1, 3, 0, 4, 2, 4, 3, 2, 0, 3, 2, 2, 4, 0, 3, 0, 4, 3, 4, 1, 0, 4, 0, 4, 4, 0, 4, 0, 1, 2, 2, 
2, 1, 3, 3, 1, 4, 1, 1, 1, 4, 4, 1, 0, 1, 3, 2, 2, 4, 4, 0, 4, 0, 3, 1, 4, 2, 0, 2, 4, 2, 0, 3, 
1, 0, 4, 4, 2, 1, 1, 0, 4, 1, 0, 4, 1, 4, 3, 2, 2, 4, 1, 4, 0, 2, 2, 2, 2, 4, 0, 0, 2, 4, 1, 1, 
3, 3, 3, 3, 3, 0, 3, 3, 0, 1, 0, 3, 4, 3, 0, 4, 0, 2, 1, 0, 1, 4, 2, 2, 0, 2, 1, 1, 2, 4, 0, 0, 
2, 4, 3, 0, 1, 3, 3, 0, 4, 2, 3, 4, 3, 4, 2, 2, 3, 1, 2, 0, 3, 4, 2, 2, 1, 0, 3, 1, 3, 1, 4, 1, 
0, 3, 3, 2, 4, 3, 3, 3, 0, 2, 4, 2, 4, 0, 4, 2, 4, 1, 4, 2, 0, 3, 3, 4, 3, 2, 4, 1, 1, 3, 1, 1, 
3, 3, 3, 2, 3, 4, 0, 4, 2, 0, 4, 4, 1, 3, 0, 3, 3, 3, 4, 4, 4, 4, 2, 1, 1, 0, 2, 2, 4, 2, 2, 4, 
3, 4, 4, 2, 4, 1, 4, 0, 4, 4, 0, 4, 4, 4, 4, 0, 2, 4, 2, 1, 4, 2, 4, 4, 0, 1, 1, 1, 3, 4, 3, 3, 
3, 0, 3, 4, 3, 1, 4, 0, 4, 2, 2, 2, 4, 1, 2, 3, 1, 1, 2, 1, 2, 1, 4, 3, 3, 0, 4, 0, 1, 0, 2, 0, 
3, 2, 0, 4, 1, 1, 2, 1, 0, 3, 1, 3, 1, 4, 3, 0, 4, 2, 4, 4, 3, 4, 3, 2, 2, 1, 0, 4, 1, 0, 1, 1, 
3, 3, 0, 2, 2, 4, 3, 3, 4, 2, 2, 0, 4, 3, 0, 4, 4, 2, 0, 4, 4, 1, 4, 3, 2, 0, 0, 1, 4, 1, 3, 3, 
0, 4, 1, 2, 1, 0, 2, 2, 1, 3, 2, 0, 3, 4, 3, 0, 3, 0, 4, 2, 2, 4, 2, 2, 0, 4, 2, 0, 2, 0, 2, 3, 
0, 1, 2, 0, 4, 1, 3, 2, 3, 4, 0, 1, 0, 3, 0, 0, 2, 4, 1, 0, 4, 0, 4, 4, 1, 2, 0, 4, 1, 1, 4, 0};
    

static u8 pu8BGModel[V_BGMODEL_SAMPLENUM*704*576]={0};

void vibe_bg(u8 * pu8CurrentImage, int l32Width, int l32Height,
             u8 * pu8ForegroundImage)
{
    static int l32IsFirstF = 1;
    int l32TempH, l32TempW, l32TempK, l32Temp, l32CurrentV,l32Counter;
    int l32NewW, l32NewH, l32Prob, l32Probility;
    static int l32TimeRdIndx = 0;
    static int l32CurSmplIndx = 0;
    static int l32NeibureIndx = 0;
    static int l32NeiSmplIndx = 0;
    u8 *pu8Temp;

	//初始化第一帧为背景模型
	if(l32IsFirstF == 1)
	{
		l32IsFirstF = 0;
		//对于每一个点建立他们的背景模型
		for(l32TempH = 1; l32TempH < (l32Height - 1); l32TempH++)
		{
			for(l32TempW = 1; l32TempW < (l32Width - 1); l32TempW++)
			{
				//边界情况不予考虑
				pu8Temp = pu8BGModel + (l32Width * l32TempH + l32TempW) * V_BGMODEL_SAMPLENUM;
				for(l32TempK = 0; l32TempK < V_BGMODEL_SAMPLENUM; l32TempK++)
				{
					//从0-7中生成一个随机数
					l32Temp = 4;//(l32)(8 * rand() / (RAND_MAX + 1.0)); 
					*(pu8Temp + l32TempK) = *(pu8CurrentImage + l32Width * l32TempH + l32TempW /*+ al32Array[l32Temp]*/);    
				}
			}
		}
	}
	//第一帧之后开始分类
	else    
	{
		//对于每一个像素点
        memset(pu8ForegroundImage, 0, l32Width);
        memset(pu8ForegroundImage + l32Width * (l32Height - 1), 0, l32Width);

		for(l32TempH = 1; l32TempH < (l32Height - 1); l32TempH++)
		{
            *(pu8ForegroundImage + l32Width * l32TempH) = V_BACKGROUND;
			for(l32TempW = 1; l32TempW < (l32Width - 1); l32TempW++)
			{
				//取出当前像素点的灰度值
				l32CurrentV = *(pu8CurrentImage + l32Width * l32TempH + l32TempW);

				//判断是否为背景点
				l32Temp = (l32Width * l32TempH + l32TempW) * V_BGMODEL_SAMPLENUM;
				l32Counter = 0;
				for(l32TempK = 0; l32TempK < V_BGMODEL_SAMPLENUM; l32TempK++)   //遍历20个背景模型中的样本点，判断在圆圈范围内的像素点的个数
				{
					if(abs(*(pu8BGModel + l32Temp + l32TempK) - l32CurrentV) <= V_RADIUS)
					{
						l32Counter++;
					}
					if(l32Counter > V_MIN_MATCHNUM_N1)
					{
						break;
					}
				}

				//判断为背景
				if(l32Counter > V_MIN_MATCHNUM_N1)   
				{
					//将分类图像的该像素置为背景
					*(pu8ForegroundImage + l32Width * l32TempH + l32TempW) = V_BACKGROUND; 

					//从0-15中生成一个随机数，并以1/16概率选择是否需要更新
					l32Prob = g_au8TimeSubRnd[l32TimeRdIndx & 0x3ff];
					l32TimeRdIndx++;

					if(l32Prob == 1)
					{ 
						//从0-19中生成一个随机数，以1/20的概率更新背景模型
						l32Prob = g_au8CurSmplRnd[l32CurSmplIndx & 0x3ff];
						l32CurSmplIndx++;

						*(pu8BGModel + l32Temp + l32Prob) = (u8)l32CurrentV;                      

						//随机更新8领域的背景模型
						l32Prob = g_au8NeibureRnd[l32NeibureIndx & 0x3ff] - 1;
						l32Probility = g_au8NeibureRnd[(l32NeibureIndx & 0x3ff) + 1] - 1;
						l32NeibureIndx += 2;

						l32NewW = l32TempW + l32Prob;
						l32NewH = l32TempH + l32Probility;
						if(l32NewH == 0 || l32NewH == (l32Height - 1) || l32NewW == 0 || l32NewW == l32Width - 1)
						{
							continue;
						}
						else
						{
							l32Prob = g_au8NeiSmplRnd[l32NeiSmplIndx & 0x3ff];
							*(pu8BGModel + (l32Width * l32NewH + l32NewW) * V_BGMODEL_SAMPLENUM + l32Prob) = (u8)l32CurrentV;   //随机更新一个样本（of 20）
							l32NeiSmplIndx++;
						} 
					}
				}
				//判断为目标
				else    
				{
					*(pu8ForegroundImage + l32Width * l32TempH + l32TempW) = V_TARGET;  //将分类图像的该像素置为目标
				}
			}
            *(pu8ForegroundImage + l32Width * l32TempH + l32Width - 1) = V_BACKGROUND;
		}
	}
}
